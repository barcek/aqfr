#!/bin/elixir

# aqfr v 1.5.6
# Â©2022 barcek
# License: MIT
# @ github.com
# /barcek/aqfr


defmodule Aqfr.Main do
  @moduledoc """
  Run primary flow to parse CLI arguments and start core module
  """

  @tag "@"
  @lag 1_000

  @doc """
  Return default command string indicator
  """
  def tag(), do: @tag

  @doc """
  Return default process completion delay
  """
  def lag(), do: @lag

  @doc """
  Pipe CLI arguments through modules and handle results
  """
  def run() do
    {:run, System.argv()}
    |> Aqfr.Opts.parse()
    |> Aqfr.Cmds.parse()
    |> perform_effects()
    |> Aqfr.Core.start()
  end

  defp perform_effects({task, args}) do
    case task do
      :end -> IO.puts(Enum.join(args, "\n"))
              System.halt(0)
      _    -> {task, args}
    end
  end

end

defmodule Aqfr.Opts do
  @moduledoc """
  Parse CLI arguments for any options and return result
  """

  @text_usage "Usage: aqfr <cmds> / --file/-f <name> [--tags/-t <used>] / --help/-h"
  @flags_file ["-f", "--file"]
  @flags_tags ["-t", "--tags"]
  @flags_help ["-h", "--help"]

  @doc """
  Pipe CLI arguments through option handlers
  """
  def parse({task, args}) do
    {task, args}
    |> handle_opt(@flags_help, &apply_help/2)
    |> handle_opt(@flags_file, &apply_file/2)
    |> handle_opt(@flags_tags, &apply_tags/2)
  end

  defp handle_opt({task, args}, flags, apply) do
    i = Enum.find_index(args, &(&1 in flags))
    case task do
      :run when i != nil -> apply.(args, i)
      _                  -> {task, args}
    end
  end

  defp apply_help(_args, _i) do
    {:end, [@text_usage]}
  end

  defp apply_file(args, i) do
    path = Enum.at(args, i + 1)
    {:run, args
    |> drop_slice(i, 2)
    |> Enum.concat(load_lines(path))}
  end

  defp load_lines(path) do
    {_, content} = File.read(path)
    String.split(content, "\n")
    |> Enum.filter(&("" != &1))
  end

  defp apply_tags(args, i) do
    tag = Enum.at(args, i + 1)
    {:run, args
    |> drop_slice(i, 2)
    |> Enum.map(&(String.replace(&1, tag, Aqfr.Main.tag)))}
  end

  defp drop_slice(list, i, n) do
    head = if i > 0, do: Enum.slice(list, 0..i), else: []
    tail = Enum.slice(list, (i + n)..-1)
    head ++ tail
  end

end

defmodule Aqfr.Cmds do
  @moduledoc """
  Parse CLI arguments for commands and return result
  """

  @doc """
  Reduce CLI arguments to map for command extraction
  """
  def parse({task, args}) do
    case task do
      :run -> {task, Enum.reduce(args, %{}, &mapify_arg/2)}
      _    -> {task, args}
    end
  end

  defp mapify_arg(arg, acc) do
    arg_parts = String.split(arg, " ")
    key = arg_parts |> Enum.at(0)        |> get_idents |> Enum.at(0)
    cmd = arg_parts |> Enum.slice(1..-2) |> Enum.join(" ")
    for = arg_parts |> Enum.at(-1)       |> get_idents
    Map.put(acc, key, %{
      :cmd => cmd,
      :for => for
    })
  end

  defp get_idents(str) do
    String.split(str, Aqfr.Main.tag)
    |> Enum.slice(1..-1)
  end

end

defmodule Aqfr.Core do
  @moduledoc """
  Run, and pipe as required resulting output across, graph of shell commands
  tagged for interrelationship, received as list of strings from main module
  """

  @doc """
  Pipe command map through tasks and invoke initial
  """
  def start({_task, args}) do
    args
    |> spawn_procs()
    |> update_fors()
    |> supply_fors()
    |> invoke_cmd0()
  end

  defp spawn_procs(map) do
    map
    |> Enum.map(&spawn_proc/1)
    |> Enum.into(%{})
  end

  defp spawn_proc({k, v}) do
    pid = spawn(Aqfr.Core, :handle_exec, [Map.get(v, :cmd)])
    val = Map.put(v, :pid, pid)
    {k, val}
  end

  @doc """
  Receive :for pid list and retain with command, then receive :pre value,
  pipe to command and send output to each process with pid in :for list
  """
  def handle_exec(cmd, for \\ []) do
    receive do
      {:for, for} ->
        handle_exec(cmd, for)
      {:pre, pre} ->
        all = if nil != pre, do: "echo \"#{String.trim(pre)}\" | #{cmd}", else: cmd
        res =
          all
          |> String.to_charlist
          |> :os.cmd
          |> to_string()
          |> String.trim()
        Enum.each(for, &(if nil != &1, do: send(&1, {:pre, res}), else: IO.puts(res)))
        handle_exec(cmd, for)
      after
        Aqfr.Main.lag -> nil
    end
  end

  defp update_fors(map) do
    Enum.reduce(map, map, &update_for/2)
  end

  defp update_for(tpl, acc) do
    {k, v} = tpl
    for = Enum.map(
      Map.get(v, :for),
      &(if "" == &1, do: nil, else: Map.get(acc, &1) |> Map.get(:pid))
    )
    val = Map.put(v, :for, for)
    Map.put(acc, k, val)
  end

  defp supply_fors(map) do
    map
    |> Enum.map(&supply_for/1)
    |> Enum.into(%{})
  end

  defp supply_for({k, v}) do
    pid = Map.get(v, :pid)
    for = Map.get(v, :for)
    send(pid, {:for, for})
    {k, v}
  end

  defp invoke_cmd0(map) do
    map
    |> Enum.at(0)
    |> elem(1)
    |> Map.get(:pid)
    |> send({:pre, nil})
  end

end

Aqfr.Main.run()
